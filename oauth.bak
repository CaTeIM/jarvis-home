<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Conectar Jarvis Home √† Alexa</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        
        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            padding: 40px;
            max-width: 400px;
            width: 100%;
        }
        
        .logo {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .logo h1 {
            color: #333;
            font-size: 28px;
            margin-bottom: 10px;
        }
        
        .logo p {
            color: #666;
            font-size: 16px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            color: #333;
            font-weight: 500;
        }
        
        input[type="text"],
        input[type="url"],
        select {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        
        input:focus,
        select:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .help-text {
            font-size: 14px;
            color: #666;
            margin-top: 5px;
        }
        
        .info-box {
            background: #f0f4ff;
            border: 1px solid #d0deff;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
        }
        
        .info-box h3 {
            color: #667eea;
            margin-bottom: 10px;
            font-size: 16px;
        }
        
        .info-box p {
            color: #555;
            font-size: 14px;
            line-height: 1.5;
        }
        
        button {
            width: 100%;
            padding: 14px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }
        
        button:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
        }
        
        .error {
            background: #fee;
            border: 1px solid #fcc;
            color: #c33;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            display: none;
        }
        
        .success {
            background: #efe;
            border: 1px solid #cfc;
            color: #3c3;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            display: none;
        }
        
        .spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #fff;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 0.8s linear infinite;
            margin-left: 10px;
            vertical-align: middle;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">
            <h1>üè† Jarvis Home</h1>
            <p>Conecte sua casa inteligente √† Alexa</p>
        </div>
        
        <div id="error" class="error"></div>
        <div id="success" class="success"></div>
        
        <form id="linkForm">
            <div class="form-group">
                <label for="ha_url">URL do Home Assistant</label>
                <input type="url" id="ha_url" name="ha_url" placeholder="https://seu-home.duckdns.org" required>
                <p class="help-text">Endere√ßo completo do seu Home Assistant</p>
            </div>
            
            <div class="form-group">
                <label for="ha_token">Token de Acesso</label>
                <input type="text" id="ha_token" name="ha_token" placeholder="Seu token de longa dura√ß√£o" required>
                <p class="help-text">Perfil ‚Üí Tokens de acesso de longa dura√ß√£o</p>
            </div>
            
            <div class="form-group">
                <label for="assistant_id">Assistente IA</label>
                <select id="assistant_id" name="assistant_id">
                    <option value="conversation.google_ai_conversation">Google AI (Gemini)</option>
                    <option value="conversation.openai_conversation">OpenAI (ChatGPT)</option>
                    <option value="">Nenhum (comandos diretos)</option>
                </select>
                <p class="help-text">Escolha qual IA processar√° seus comandos</p>
            </div>
            
            <div class="info-box">
                <h3>‚ÑπÔ∏è Importante</h3>
                <p>Certifique-se de que seu Home Assistant est√° acess√≠vel pela internet e o token tem as permiss√µes necess√°rias.</p>
            </div>
            
            <button type="submit" id="submitBtn">
                Conectar √† Alexa
            </button>
        </form>
    </div>
    
    <script>
        // Capturar par√¢metros da URL
        const urlParams = new URLSearchParams(window.location.search);
        const state = urlParams.get('state');
        const redirectUri = urlParams.get('redirect_uri');
        const clientId = urlParams.get('client_id');
        
        // Verificar se temos os par√¢metros necess√°rios
        if (!state || !redirectUri) {
            document.getElementById('error').textContent = '‚ùå Par√¢metros inv√°lidos. Por favor, tente novamente atrav√©s da Alexa.';
            document.getElementById('error').style.display = 'block';
            document.getElementById('linkForm').style.display = 'none';
        }
        
        // Preencher valores salvos se existirem
        if (localStorage.getItem('ha_url')) {
            document.getElementById('ha_url').value = localStorage.getItem('ha_url');
        }
        if (localStorage.getItem('assistant_id')) {
            document.getElementById('assistant_id').value = localStorage.getItem('assistant_id');
        }
        
        document.getElementById('linkForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const submitBtn = document.getElementById('submitBtn');
            const errorDiv = document.getElementById('error');
            const successDiv = document.getElementById('success');
            
            // Resetar mensagens
            errorDiv.style.display = 'none';
            successDiv.style.display = 'none';
            
            // Desabilitar bot√£o
            submitBtn.disabled = true;
            submitBtn.innerHTML = 'Conectando... <span class="spinner"></span>';
            
            const formData = {
                ha_url: document.getElementById('ha_url').value.trim(),
                ha_token: document.getElementById('ha_token').value.trim(),
                assistant_id: document.getElementById('assistant_id').value
            };
            
            // Validar URL
            try {
                new URL(formData.ha_url);
            } catch (e) {
                errorDiv.textContent = '‚ùå URL inv√°lida. Use o formato: https://seu-home.duckdns.org';
                errorDiv.style.display = 'block';
                submitBtn.disabled = false;
                submitBtn.textContent = 'Conectar √† Alexa';
                return;
            }
            
            // Salvar valores (exceto token)
            localStorage.setItem('ha_url', formData.ha_url);
            localStorage.setItem('assistant_id', formData.assistant_id);
            
            try {
                // Enviar para Lambda
                const response = await fetch('https://8c83hb61aj.execute-api.sa-east-1.amazonaws.com/prod/oauth/authorize', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                const data = await response.json();
                
                if (response.ok && data.auth_code) {
                    successDiv.textContent = '‚úÖ Conex√£o estabelecida! Redirecionando...';
                    successDiv.style.display = 'block';
                    
                    // Redirecionar de volta para Alexa com o c√≥digo
                    setTimeout(() => {
                        const returnUrl = `${redirectUri}?code=${data.auth_code}&state=${encodeURIComponent(state)}`;
                        window.location.href = returnUrl;
                    }, 1000);
                } else {
                    throw new Error(data.error || 'Erro ao conectar');
                }
                
            } catch (error) {
                console.error('Erro:', error);
                errorDiv.textContent = `‚ùå Erro ao conectar: ${error.message}`;
                errorDiv.style.display = 'block';
                submitBtn.disabled = false;
                submitBtn.textContent = 'Conectar √† Alexa';
            }
        });
    </script>
</body>
</html>